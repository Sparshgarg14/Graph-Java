class Solution {
    public int findTheCity(int n, int[][] edges, int thresh) {
        int dis[][] =new int[n][n];
          for(int i =0;i<n;i++){
            for(int j =0;j<n;j++){
                dis[i][j] = Integer.MAX_VALUE;
            }
          }

         for(int i =0;i<edges.length;i++){
            int u = edges[i][0];
            int v = edges[i][1];
            int wt = edges[i][2];
            dis[u][v] = wt;
            dis[v][u] = wt;
         }
        //  for(int i =0;i<n;i++)dis[i][i] =0;
        //    for(int i =0;i<n;i++){
        //     System.out.println(Arrays.toString(dis[i]));
        //  }
         
         for(int k =0;k<n;k++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(dis[i][k]==Integer.MAX_VALUE || dis[k][j]== Integer.MAX_VALUE)continue;
                    dis[i][j] = Math.min(dis[i][j], (dis[i][k] + dis[k][j]));
                }
            }
         }
        //  for(int i =0;i<n;i++){
        //     System.out.println(Arrays.toString(dis[i]));
        //  }
           
            int citymax=Integer.MAX_VALUE;
            int ans = -1;
        for(int i =0;i<n;i++){
             int city=0;
            for(int j=0;j<n;j++){
               if(j!=i && dis[i][j]<=thresh)city++;
            }
          
              if(citymax>=city){
                citymax= Math.min(citymax, city);
                ans  = Math.max(ans, i);
              }
                // System.out.println(city + " " + citymax +" " + ans);
            }
        return ans;
    }
}